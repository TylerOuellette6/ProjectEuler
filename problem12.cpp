#include <iostream>
#include <fstream>
#include<bits/stdc++.h>
using namespace std;

/*
PROBLEM:
The sequence of triangle numbers is generated by adding the natural numbers. 
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

1: 1
3: 1,3
6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/

/**
* @param sum - The sum returned from getTriangleNumber().
* @return numDivisors - The total number of divisors.
*/
int getNumDivisors(int sum){
	int numDivisors = 0;
	int sqRoot = sqrt(sum);
	// Only need to go up to the square root because there's just as many 
	// factors/divisors under the square root as there are over the square roo
	for(int i = 1; i <= sqRoot; i++){
		if(sum % i == 0){
		    // Add two since the smaller number under the square root
		    // will have to be multipled toa  larget number over the square root
			numDivisors += 2;
		}
	}
	
	// If the square root times itself equals the sum, that has to mean 
	// there is one less divisor since it doesn't have a "larger counterpart"
	if(sqRoot * sqRoot == sum){
	    numDivisors--;
	}
	return numDivisors;
}

int main(){
	int sum = 0;
	int counter = 1;
	
	// Keep going until a number is found with 500 divisors
	while(getNumDivisors(sum) < 500){
	    // Keeps the running sum
	    sum += counter;
	    counter++;
	}
	
	cout << "Sum : " << sum << "\tTriangle Number: " << counter;
	
	return 0;
}